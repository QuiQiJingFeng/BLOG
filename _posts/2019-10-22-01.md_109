---
layout: post
title:  "(in-place algorithm) 原地算法"
image: ''
date:   2019-10-22 10:26:31
tags:
- 算法
description: ''
categories: 
- 算法
---

# in-place algorithm
####  In computer science, an in-place algorithm is an algorithm which transforms input using no auxiliary data structure. However a small amount of extra storage space is allowed for auxiliary variables. The input is usually overwritten by the output as the algorithm executes. In-place algorithm updates input sequence only through replacement or swapping of elements. An algorithm which is not in-place is sometimes called not-in-place or out-of-place.  --wiki
* __在计算机科学中,一个in-place算法是一个不需要辅助数据结构转换输入的一种算法。__
* __可以使用少量的额外存储空间,例如辅助变量之类的__
* __输入通常在程序执行的时候被覆写__
* __算法仅通过替换、交换操作更新输入序列__
* __非in-place算法有时被称为not-in-place算法或者out-of-place算法__


#### example 1
>给定数组 nums = [1,1,2], 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
你不需要考虑数组中超出新长度后面的元素。

* 思路:
* 1、先冒泡排序给定数组
* 2、然后定义一个指针指向数组的第二位,遍历数组,如果找到一个跟上一个元素不同的元素,
则将该元素写入指针指向的位置,并且指针后移一位。
>lua代码:
```lua
local array = {1,21,57,4,2,3,7,4,6,9,8}
local function sortFunc(a,b)
	return a > b
end
--冒泡排序
local function sort(array)
	while true do
		local isSort = false
		for i=1,#array - 1 do
			local a = array[i]
			local b = array[i+1]
			if sortFunc(a,b) then
				isSort = true
				local temp = a
				array[i] = b
				array[i+1] = temp
			end
		end
		if not isSort then
			break
		end
	end
end
sort(array)
--模拟指针,指向下一个可修改的位置
local ptr = 2
for i,v in ipairs(array) do
	if array[i - 1] and v ~= array[i - 1] then
		array[ptr] = v
		ptr = ptr + 1
	end
end
for i,v in ipairs(array) do
	print(i,v)
end
print("\nptr =>",ptr," length = ",ptr - 1)
```


