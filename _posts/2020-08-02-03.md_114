---
layout: post
title:  "OpenGL绘制矩形"
image: ''
date:   2020-08-02 17:16:00
tags:
- OpenGL
description: ''
categories: 
- OpenGL
---
#### 教程链接 [https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/](https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/)
### 本节介绍下索引缓冲对象(EBO)
#### 在渲染顶点这一话题上我们还有最后一个需要讨论的东西——索引缓冲对象(Element Buffer Object，EBO，也叫Index Buffer Object，IBO)。
#### 要解释索引缓冲对象的工作方式最好还是举个例子：假设我们不再绘制一个三角形而是绘制一个矩形。我们可以绘制两个三角形来组成一个矩形（OpenGL主要处理三角形）。这会生成下面的顶点的集合：
```c
float vertices[] = {
    // 第一个三角形
    0.5f, 0.5f, 0.0f,   // 右上角
    0.5f, -0.5f, 0.0f,  // 右下角
    -0.5f, 0.5f, 0.0f,  // 左上角
    // 第二个三角形
    0.5f, -0.5f, 0.0f,  // 右下角
    -0.5f, -0.5f, 0.0f, // 左下角
    -0.5f, 0.5f, 0.0f   // 左上角
};
```
#### 可以看到，有几个顶点叠加了。我们指定了右下角和左上角两次！一个矩形只有4个而不是6个顶点，这样就产生50%的额外开销.
#### 更好的解决方案是只储存不同的顶点，并设定绘制这些顶点的顺序。这样子我们只要储存4个顶点就能绘制矩形了，之后只要指定绘制的顺序就行了

#### 索引缓冲对象的工作方式正是这样的,和顶点缓冲对象一样，EBO也是一个缓冲，它专门储存索引，OpenGL调用这些顶点的索引来决定该绘制哪个顶点。所谓的索引绘制(Indexed Drawing)正是我们问题的解决方案

#### 首先，我们先要定义（不重复的）顶点，和绘制出矩形所需的索引：
```c
float vertices[] = {
    0.5f, 0.5f, 0.0f,   // 右上角
    0.5f, -0.5f, 0.0f,  // 右下角
    -0.5f, -0.5f, 0.0f, // 左下角
    -0.5f, 0.5f, 0.0f   // 左上角
};

unsigned int indices[] = { // 注意索引从0开始! 
    0, 1, 3, // 第一个三角形
    1, 2, 3  // 第二个三角形
};
```
#### 可以看到，当时用索引的时候，我们只定义了4个顶点，而不是6个。

* 使用上首先是数据结构发生了变化,需要有两个数组,第一个是顶点数组,第二个是索引数组
* 创建EBO、绑定EBO之后，将索引数组赋值到EBO中
* 绘制函数要使用新的函数glDrawElements，而不是glDrawArrays
* 结束时销毁EBO的空间
#### PS:需要注意的是EBO在VAO活跃期间是不能解绑的

```c
//
//  main.cpp
//  drawRect
//
//  Created by JingFeng on 2020/8/2.
//  Copyright © 2020 JingFeng. All rights reserved.
//

#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <iostream>
//窗口大小发生改变
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    glViewport(0, 0, width, height);
}

//监听键盘点击事件,如果ESC键被点击了则退出程序
void processInput(GLFWwindow *window)
{
    if(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
}

int main(int argc, const char * argv[]) {
    //初始化GLFW
    glfwInit();
    //指定OpenGL版本为3.3
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    /*设置OpenGL的模式为 核心模式(Core-profile) //另一个立即模式已经被废弃了*/
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    
    /*如果使用的是Mac OS X系统，还需要加下面这行代码到你的初始化代码中这些配置才能起作用（将上面的代码解除注释）*/
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
    /*创建一个宽800 高600的窗口,窗口名称为LearnOpenGL*/
    GLFWwindow* window = glfwCreateWindow(800, 600, "LearnOpenGL", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    //通知GLFW将这个窗口的上下文设置为当前线程的主上下文
    glfwMakeContextCurrent(window);
    //GLAD是用来管理OpenGL的函数指针的，所以在调用任何OpenGL的函数之前我们需要初始化GLAD。
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }
    //设置视口
    glViewport(0, 0, 800, 600);
    
    //注册窗口大小改变的监听,改变之后需要重新设置视口
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
    
    
    
    //==============处理着色器==========
    char* vertexShaderSource = "\
    #version 330 core\
    layout (location = 0) in vec3 aPos;\
    void main()\
    {\
        gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\
    }";
    //创建一个着色器对象
    unsigned int vertexShader;
    vertexShader = glCreateShader(GL_VERTEX_SHADER);
    //加载着色器源码
    /*
        GLuint shader,  着色器对象
        GLsizei count,  源码字符串数量
        const GLchar *const*string,  源码字符串
        const GLint *length)  第四个参数我们先设置为NULL
     */
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
    //编译着色器源码
    glCompileShader(vertexShader);
    
    //检测是否编译成功
    int  success;
    char infoLog[512]; //错误日志
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if(!success)
    {
        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    
    //片段着色器阶段
    //片段着色器所做的是计算像素最后的颜色输出
    //当在OpenGL或GLSL中定义一个颜色的时候，我们把颜色每个分量的强度设置在0.0到1.0之间
    char* fragmentShaderSource = "\
    #version 330 core\
    out vec4 FragColor; \
    void main()\
    {\
        FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\
    } ";
    //创建片段着色器
    unsigned int fragmentShader;
    fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    //加载源码
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
    //编译源码
    glCompileShader(fragmentShader);
    
    //检测是否编译成功
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    if(!success)
    {
        glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    //两个着色器现在都编译了，剩下的事情是把两个着色器对象链接到一个用来渲染的着色器程序(Shader Program)中
    //创建一个着色器程序对象
    unsigned int shaderProgram;
    shaderProgram = glCreateProgram();
    //将顶点着色器和片段着色器附加到着色器程序对象
    /*
     当链接着色器至一个程序的时候，它会把每个着色器的输出链接到下个着色器的输入。当输出和输入不匹配的时候，你会得到一个连接错误。
     所以这里需要注意着色器附加的顺序
     */
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);
    
    //检测链接着色器是否失败
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    if(!success) {
        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER_PROGRAM::LINK_FAILED\n" << infoLog << std::endl;
    }
    
    //在把着色器对象链接到程序对象以后，记得删除着色器对象，我们不再需要它们了
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);
    
    //处理顶点数据以及VAO/VBO
    // ===========本节重点 began============
    //顶点数据数组
    float vertices[] = {
        0.5f, 0.5f, 0.0f,   // 右上角
        0.5f, -0.5f, 0.0f,  // 右下角
        -0.5f, -0.5f, 0.0f, // 左下角
        -0.5f, 0.5f, 0.0f   // 左上角
    };

    unsigned int indices[] = { // 注意索引从0开始!
        0, 1, 3, // 第一个三角形
        1, 2, 3  // 第二个三角形
    };
    // ===========本节重点 ended============
    //创建VAO 顶点数组对象
    /*
     顶点数组对象(Vertex Array Object, VAO)可以像顶点缓冲对象那样被绑定，任何随后的顶点属性调用都会储存在这个VAO中。这样的好处就是，当配置顶点属性指针时，你只需要将那些调用执行一次，之后再绘制物体的时候只需要绑定相应的VAO就行了
     */
    unsigned int VAO;
    glGenVertexArrays(1, &VAO);
    // 1. 绑定VAO
    glBindVertexArray(VAO);
    
    //创建顶点缓冲区
    unsigned int VBO;
    glGenBuffers(1, &VBO);
    //绑定VBO为当前缓冲区
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    
    //将顶点数据数组拷贝到当前缓冲区
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    
    // ===========本节重点 began============
    //创建EBO
    unsigned int EBO;
    glGenBuffers(1, &EBO);
    //绑定EBO
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    //把索引赋值到缓冲区
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
    // ===========本节重点 ended============
    
    
    /*
     第一个参数指定我们要配置的顶点属性。还记得我们在顶点着色器中使用layout(location = 0)定义了position顶点属性的位置值(Location)吗？它可以把顶点属性的位置值设置为0。因为我们希望把数据传递到这一个顶点属性中，所以这里我们传入0。
     第二个参数指定顶点属性的大小。顶点属性是一个vec3，它由3个值组成，所以大小是3。
     第三个参数指定数据的类型，这里是GL_FLOAT(GLSL中vec*都是由浮点数值组成的)。
     下个参数定义我们是否希望数据被标准化(Normalize)。如果我们设置为GL_TRUE，所有数据都会被映射到0（对于有符号型signed数据是-1）到1之间。我们把它设置为GL_FALSE。
     第五个参数叫做步长(Stride)，它告诉我们在连续的顶点属性组之间的间隔。由于下个组位置数据在3个float之后，我们把步长设置为3 * sizeof(float)。要注意的是由于我们知道这个数组是紧密排列的（在两个顶点属性之间没有空隙）我们也可以设置为0来让OpenGL决定具体步长是多少（只有当数值是紧密排列时才可用）一旦我们有更多的顶点属性，我们就必须更小心地定义每个顶点属性之间的间隔
     最后一个参数的类型是void*，所以需要我们进行这个奇怪的强制类型转换。它表示位置数据在缓冲中起始位置的偏移量(Offset)。由于位置数据在数组的开头，所以这里是0。
     */
    /*
     每个顶点属性从一个VBO管理的内存中获得它的数据，而具体是从哪个VBO（程序中可以有多个VBO）获取则是通过在调用glVertexAttribPointer时绑定到GL_ARRAY_BUFFER的VBO决定的。由于在调用glVertexAttribPointer之前绑定的是先前定义的VBO对象，顶点属性0现在会链接到它的顶点数据。
     */
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    //以顶点属性位置值作为参数，启用顶点属性；顶点属性默认是禁用的
    glEnableVertexAttribArray(0);
    
    // ===========本节重点 began============
    //ERROR 这里不能解绑EBO
    /*
     当VAO处于活动状态时，不要解除绑定EBO，因为绑定元素缓冲对象存储在VAO中；请保持EBO绑定。
     */
    //glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
    // ===========本节重点 ended============
    
    //解绑VBO
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    
    //解绑VAO 需要使用的时候重新绑定一次即可
    glBindVertexArray(0);
    
    
    
    
    
    
    //我们可不希望只绘制一个图像之后我们的应用程序就立即退出并关闭窗口。
    //我们希望程序在我们主动关闭它之前不断绘制图像并能够接受用户输入
    //每次循环的开始前检查一次GLFW是否被要求退出
    while(!glfwWindowShouldClose(window))
    {
        //处理输入事件
        processInput(window);
        
        //指定颜色清空屏幕
        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);
        
        
        glUseProgram(shaderProgram);
        glBindVertexArray(VAO);
        // ===========本节重点 began============
        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
        // ===========本节重点 ended============
        
        
        //交换颜色缓冲
        /*
         双缓冲(Double Buffer)
         应用程序使用单缓冲绘图时可能会存在图像闪烁的问题。 这是因为生成的图像不是一下子被绘制出来的，而是按照从左到右，由上而下逐像素地绘制而成的。最终图像不是在瞬间显示给用户，而是通过一步一步生成的，这会导致渲染的结果很不真实。为了规避这些问题，我们应用双缓冲渲染窗口应用程序。前缓冲保存着最终输出的图像，它会在屏幕上显示；而所有的的渲染指令都会在后缓冲上绘制。当所有的渲染指令执行完毕后，我们交换(Swap)前缓冲和后缓冲，这样图像就立即呈显出来，之前提到的不真实感就消除了。
         */
        glfwSwapBuffers(window);
        //检查有没有触发什么事件（比如键盘输入、鼠标移动等）、更新窗口状态，并调用对应的回调函数
        glfwPollEvents();
    }
    
    //手动清理申请的VAO/VBO/EBO/shaderProgram
    // ------------------------------------------------------------------------
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glDeleteBuffers(1, &EBO);
    glDeleteProgram(shaderProgram);
    
    //当渲染循环结束后我们需要正确释放/删除之前的分配的所有资源
    glfwTerminate();
    
    return 0;
}


```