---
layout: post
title:  "cocos 渲染到贴图,进行后期处理"
image: ''
date:   2021-02-26 11:25:36
tags:
- Cocos
description: ''
categories: 
- Cocos
---

```c++
//初始化,创建帧缓冲区
void Director::setOpenGLView(GLView *openGLView)
{
    ...
    ...
	auto size = Director::getInstance()->getVisibleSize();
	if (_renderTexture == nullptr){
		_renderTexture = RenderTexture::create(size.width, size.height, Texture2D::PixelFormat::RGBA8888, GL_DEPTH24_STENCIL8);
		_renderTexture->setPosition(Vec2(size.width / 2, size.height / 2));
		_renderTexture->retain();
	}
	
}

//渲染
void Director::drawScene()
{
   
    ...
    ...
    if (_runningScene)
    {
#if (CC_USE_PHYSICS || (CC_USE_3D_PHYSICS && CC_ENABLE_BULLET_INTEGRATION) || CC_USE_NAVMESH)
        _runningScene->stepPhysicsAndNavigation(_deltaTime);
#endif
        //clear draw stats
        _renderer->clearDrawStats();
        //切换帧缓冲区为自定义缓冲区<注意,实际执行的时机是渲染时候的回调，begin实际上是向渲染队列注册了一个回调,end,visit同理>
		if (_renderTexture)
			_renderTexture->begin();
        //render the scene
        _runningScene->render(_renderer);
        
        _eventDispatcher->dispatchEvent(_eventAfterVisit);
    }

	if (_renderTexture){
		_renderTexture->end();//当执行到end命令回调的时候切换之前的缓冲区
	    _renderTexture->visit(_renderer, Mat4::IDENTITY, 0);  //将自定义缓冲区的内容进行绘制
    }

    // draw the notifications node
    if (_notificationNode)
    {
        _notificationNode->visit(_renderer, Mat4::IDENTITY, 0);
    }

    if (_displayStats)
    {
        showStats();
    }
	//真正开始循环队列进行绘制
    _renderer->render();

    _eventDispatcher->dispatchEvent(_eventAfterDraw);

    popMatrix(MATRIX_STACK_TYPE::MATRIX_STACK_MODELVIEW);

    _totalFrames++;

    // swap buffers
    if (_openGLView)
    {
        _openGLView->swapBuffers();
    }

    if (_displayStats)
    {
        calculateMPF();
    }
}
```

之后可以在游戏中动态的改变帧缓冲对应的shader,比如某个按钮点击之后，对整个画面模糊,或者玩家死亡之后对整个画面置灰等等
```c++
_renderTexture->getSprite()->setGLProgram(program);
```