---
layout: post
title:  "Cocos源码解析<一>"
image: ''
date:   2020-10-14 09:59:53
tags:
- Cocos
description: ''
categories: 
- Cocos
---
# Cocos源码解析<一>

## 1. 多平台启动
![图片](..\assets\img\opengl\multi_platform.png)  

当AppDelegate实例化的时候,父类Application中会有个指针sm_pSharedApplication指向AppDelegate，当调用Application::getInstance()的时候返回这个指针.


```c++
//CCApplication.h
#if CC_TARGET_PLATFORM == CC_PLATFORM_MAC
#include "platform/mac/CCApplication-mac.h"
#elif CC_TARGET_PLATFORM == CC_PLATFORM_IOS
#include "platform/ios/CCApplication-ios.h"
#elif CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID
#include "platform/android/CCApplication-android.h"
#elif CC_TARGET_PLATFORM == CC_PLATFORM_WIN32
#include "platform/win32/CCApplication-win32.h"
#elif CC_TARGET_PLATFORM == CC_PLATFORM_WP8
#include "platform/winrt/CCApplication.h"
#elif CC_TARGET_PLATFORM == CC_PLATFORM_LINUX
#include "platform/linux/CCApplication-linux.h"
#endif

//AppDelegate.h
class  AppDelegate : private cocos2d::Application
{
	//xxxxxxxxxxxxxxxx
};

//CCApplication-win32.cpp
Application * Application::sm_pSharedApplication = 0;
Application::Application()
: _instance(nullptr)
, _accelTable(nullptr)
{
	//xxxxxxxx
    sm_pSharedApplication = this;
}
Application* Application::getInstance()
{
    CC_ASSERT(sm_pSharedApplication);
    return sm_pSharedApplication;
}

//SimulatorWin.cpp
int SimulatorWin::run()
{
	//xxxxxxxxxxx
	_app = new AppDelegate();
	//xxxxxxxxxx
	auto app = Application::getInstance();
	//xxxxxxxxxx
	return app->run();
}

```
以windows为例:
1. CCApplication.h 根据不同平台加载不同的头文件,在windows下会加载CCApplication-win32.h
2. AppDelegate 继承自Application,即使继承了 CCApplication-win32.h 的类
3. Application类有个静态指针指向了第一个实例化Application的对象，并且在getInstance的时候返回
4. 因为new AppDelegate()是第一个实例化的Application对象,所以Application::getInstance()返回的是AppDelegate的对象。


```c++
int Application::run()
{
    //xxxxxxxxxxxxxxxxx

    // 先通知代理启动完毕
    if (!applicationDidFinishLaunching())
    {
        return 0;
    }

    auto director = Director::getInstance();
    auto glview = director->getOpenGLView();

    // Retain glview to avoid glview being released in the while loop
    glview->retain();

    while(!glview->windowShouldClose())
    {
        QueryPerformanceCounter(&nNow);
        if (nNow.QuadPart - nLast.QuadPart > _animationInterval.QuadPart)
        {
            nLast.QuadPart = nNow.QuadPart - (nNow.QuadPart % _animationInterval.QuadPart);
            
			//驱动director的主循环
            director->mainLoop();

			//抛出opengl的事件
            glview->pollEvents();
        }
        else
        {
            Sleep(1);
        }
    }

    // XXXXXXXXXXXXXXXXXXX
}
```

不同平台下通过不同的方式来驱动Director的主循环,然后进行各种绘制。

## 2. 不同平台的OpenGL处理
![图片](..\assets\img\opengl\multi_opengl.png)  

```c++
//CCGL.h
//#ifndef __PLATFORM_CCGL_H__
#define __PLATFORM_CCGL_H__
/// @cond DO_NOT_SHOW

#include "platform/CCPlatformConfig.h"

#if CC_TARGET_PLATFORM == CC_PLATFORM_MAC
#include "platform/mac/CCGL-mac.h"
#elif CC_TARGET_PLATFORM == CC_PLATFORM_IOS
#include "platform/ios/CCGL-ios.h"
#elif CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID
#include "platform/android/CCGL-android.h"
#elif CC_TARGET_PLATFORM == CC_PLATFORM_WIN32
#include "platform/win32/CCGL-win32.h"
#elif CC_TARGET_PLATFORM == CC_PLATFORM_WP8 || CC_TARGET_PLATFORM == CC_PLATFORM_WINRT
#include "platform/winrt/CCGL.h"
#elif CC_TARGET_PLATFORM == CC_PLATFORM_LINUX
#include "platform/linux/CCGL-linux.h"
#endif

/// @endcond
#endif /* __PLATFORM_CCPLATFORMDEFINE_H__*/
```
```c++
//CCGL-win32.h
#ifndef __CCGL_H__
#define __CCGL_H__

#include "platform/CCPlatformConfig.h"
#if CC_TARGET_PLATFORM == CC_PLATFORM_WIN32

#include "GL/glew.h"

#define CC_GL_DEPTH24_STENCIL8		GL_DEPTH24_STENCIL8

#endif // CC_TARGET_PLATFORM == CC_PLATFORM_WIN32

#endif // __CCGL_H__
```
```c++
//CCGL-android.h
#ifndef __CCGL_H__
#define __CCGL_H__

#include "platform/CCPlatformConfig.h"
#if CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID

#define	glClearDepth				glClearDepthf
#define glDeleteVertexArrays		glDeleteVertexArraysOES
#define glGenVertexArrays			glGenVertexArraysOES
#define glBindVertexArray			glBindVertexArrayOES
#define glMapBuffer					glMapBufferOES
#define glUnmapBuffer				glUnmapBufferOES

#define GL_DEPTH24_STENCIL8			GL_DEPTH24_STENCIL8_OES
#define GL_WRITE_ONLY				GL_WRITE_ONLY_OES

// GL_GLEXT_PROTOTYPES isn't defined in glplatform.h on android ndk r7 
// we manually define it here
#include <GLES2/gl2platform.h>
#ifndef GL_GLEXT_PROTOTYPES
#define GL_GLEXT_PROTOTYPES 1
#endif

// normal process
#include <GLES2/gl2.h>
#include <GLES2/gl2ext.h>
// gl2.h doesn't define GLchar on Android
typedef char GLchar;
// android defines GL_BGRA_EXT but not GL_BRGA
#ifndef GL_BGRA
#define GL_BGRA  0x80E1
#endif

//declare here while define in EGLView_android.cpp
extern PFNGLGENVERTEXARRAYSOESPROC glGenVertexArraysOESEXT;
extern PFNGLBINDVERTEXARRAYOESPROC glBindVertexArrayOESEXT;
extern PFNGLDELETEVERTEXARRAYSOESPROC glDeleteVertexArraysOESEXT;

#define glGenVertexArraysOES glGenVertexArraysOESEXT
#define glBindVertexArrayOES glBindVertexArrayOESEXT
#define glDeleteVertexArraysOES glDeleteVertexArraysOESEXT


#endif // CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID

#endif // __CCGL_H__
```
```c++
//CCGL-ios.h
#ifndef __PLATFORM_IOS_CCGL_H__
#define __PLATFORM_IOS_CCGL_H__

#include "platform/CCPlatformConfig.h"
#if CC_TARGET_PLATFORM == CC_PLATFORM_IOS

#define	glClearDepth				glClearDepthf
#define glDeleteVertexArrays		glDeleteVertexArraysOES
#define glGenVertexArrays			glGenVertexArraysOES
#define glBindVertexArray			glBindVertexArrayOES
#define glMapBuffer					glMapBufferOES
#define glUnmapBuffer				glUnmapBufferOES

#define GL_DEPTH24_STENCIL8			GL_DEPTH24_STENCIL8_OES
#define GL_WRITE_ONLY				GL_WRITE_ONLY_OES

#include <OpenGLES/ES2/gl.h>
#include <OpenGLES/ES2/glext.h>

#endif // CC_PLATFORM_IOS

#endif // __PLATFORM_IOS_CCGL_H__
```
```c++
//CCGL-mac.h
#ifndef __PLATFORM_MAC_CCGL_H__
#define __PLATFORM_MAC_CCGL_H__

#include "platform/CCPlatformConfig.h"
#if CC_TARGET_PLATFORM == CC_PLATFORM_MAC

#import <OpenGL/gl.h>
#import <OpenGL/glu.h>
#import <OpenGL/glext.h>

#define CC_GL_DEPTH24_STENCIL8      -1


#define glDeleteVertexArrays            glDeleteVertexArraysAPPLE
#define glGenVertexArrays               glGenVertexArraysAPPLE
#define glBindVertexArray               glBindVertexArrayAPPLE
#define glClearDepthf                   glClearDepth
#define glDepthRangef                   glDepthRange
#define glReleaseShaderCompiler(xxx)


#endif // __PLATFORM_MAC_CCGL_H__

#endif //s CC_TARGET_PLATFORM == CC_PLATFORM_MAC
```
在使用的时候统一导入CCGL.h头文件就行,平台的差异都被屏蔽在其他几个文件当中了。
 
还好的是openglAPI各个平台基本相同,同时又有glfw这个跨平台的兼容库,所以绘图方面的差异并不是很大

## 3. 绘图
![图片](..\assets\img\opengl\opengl_draw.png)  
所有涉及到调用opengl绘制图像的都需要重写draw函数
```c++
void DrawNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
{
    if(_bufferCount)
    {
        _customCommand.init(_globalZOrder, transform, flags);
        _customCommand.func = CC_CALLBACK_0(DrawNode::onDraw, this, transform, flags);
        renderer->addCommand(&_customCommand);
    }
	//.....
}
```
draw函数中将要绘制的回调方法添加到Render的绘制队列当中,当遍历完整个树之后进行渲染
```c++
// Draw the Scene
void Director::drawScene()
{
    //...
    _renderer->render();
    //...
}
```
```c++
void Renderer::drawBatchedQuads()
{
    //XXXXXXXXXXXX
    //遍历队列将连续相同的命令取出来绘制
    //Start drawing verties in batch
    for(const auto& cmd : _batchQuadCommands)
    {
        auto newMaterialID = cmd->getMaterialID();
        if(_lastMaterialID != newMaterialID || newMaterialID == MATERIAL_ID_DO_NOT_BATCH)
        {
            if(indexToDraw > 0)
            {
                //绘制
            }
            
            //Use new material
            cmd->useMaterial();
            _lastMaterialID = newMaterialID;
        }
        
        indexToDraw += cmd->getQuadCount() * 6;
    }
    
    //Draw any remaining quad
    if(indexToDraw > 0)
    {
        //绘制
    }
}
```
这个就是3.X之后完成的批量绘制合并,在连续绘制的时候如果绘制的状态完全相同,那么可以合并为一次绘制

