---
layout: post
title:  "C#学习<二>"
image: ''
date:   2021-05-26 17:12:32
tags:
- C#
description: ''
categories: 
- C#
---
[官方文档 参考](https://docs.microsoft.com/zh-cn/dotnet/csharp/tour-of-csharp/)

1. C# 类型系统
* 值类型
    1. 简单类型
        * **有符号整型:** sbyte、short、int、long
        * **无符号整型：** byte、ushort、uint、ulong
        * **Unicode 字符：** char，表示 UTF-16 代码单元
        * **IEEE 二进制浮点：** float、double
        * **高精度十进制浮点数：** decimal
        * **布尔值：** bool，表示布尔值（true 或 false）

    2. 枚举类型  
        * **enum E {...}** 格式的用户定义类型。   
        enum 类型是一种包含已命名常量的独特类型。每个 enum 类型都有一个基础类型（必须是八种整型类型之一）。    
        enum 类型的值集与基础类型的值集相同。

    3. 结构类型  
        * 格式为 **struct S {...}** 的用户定义类型
    
    4. 可以为 null 的值类型  
        * 值为 null 的其他所有值类型的扩展
    
    5. 元组值类型
        * 格式为 (T1, T2, ...) 的用户定义类型
* 引用类型
    1. 类类型
        * 其他所有类型的最终基类：object
        * Unicode 字符串：string，表示 UTF-16 代码单元序列
        * 格式为 **class C {...}** 的用户定义类型
    2. 接口类型
        * 格式为 **interface I {...}** 的用户定义类型
    3. 数组类型
        * 一维、多维和交错。 例如：int[]、int[,] 和 int[][]
    4. 委托类型
        * 格式为 delegate int D(...) 的用户定义类型

C# 程序使用 类型声明 创建新类型。 类型声明指定新类型的名称和成员。 用户可定义以下六种 C# 类型：类类型、结构类型、接口类型、枚举类型、委托类型和元组值类型。

* **class** 类型定义包含数据成员（字段）和函数成员（方法、属性及其他）的数据结构。 类类型支持单一继承和多形性，即派生类可以扩展和专门针对基类的机制。
* **struct** 类型定义包含数据成员和函数成员的结构，这一点与类类型相似。 不过，与类不同的是，结构是值类型，通常不需要进行堆分配。 结构类型不支持用户指定的继承，并且所有结构类型均隐式继承自类型 object。
* **interface** 类型将协定定义为一组已命名的公共成员。 实现 interface 的 class 或 struct 必须提供接口成员的实现代码。 interface 可以继承自多个基接口，class 和 struct 可以实现多个接口。
* **delegate** <font color=#00ffff size=2 face="黑体"> 类型表示引用包含特定参数列表和返回类型的方法。 通过委托，可以将方法视为可分配给变量并可作为参数传递的实体。 委托类同于函数式语言提供的函数类型。 它们还类似于其他一些语言中存在的“函数指针”概念。 与函数指针不同，委托是面向对象且类型安全的。</font>